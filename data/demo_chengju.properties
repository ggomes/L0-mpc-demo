SCENARIO = C:\\Users\\gomes\\code\\L0\\L0-mpc-demo\\data\\demo.xml
SIM_DT = 5
OUTPUT_PREFIX = C:\\Users\\gomes\\code\\L0\\L0-mpc-demo\\data\\tester
#OUTPUT_FORMAT = text
#START_TIME = 0
DURATION = 3600
OUTPUT_DT = 5
matlabRoot = C:\\Users\\gomes\\code\\L0\\L0-boundary-flows
# all the other L0 code should exist in the same base directory as above
beatsRoot = C:\\Users\\gomes\\code\\L0\\beats
# <beatsRoot>/target/ should be where all the class files for beats are.

# ipopt: high-level black-box nonlinear solver. does some quasi-newton stuff, requires gradient method
# rprop: heuristic method requiring gradient method, used by papageorgiou for similar work
# multistart: rprop w/ many initial starting points run in parallel
# chained: experimental combination of the above methods, best in JDR opinion
RAMP_METERING_ADJOINT.optimizer = ipopt

# how many iterations to perform on gradient descent. ~ the # of gradient calls
RAMP_METERING_ADJOINT.optimizer-max-iter = 30

# how many restarts to use when a multistart optimizer is used
RAMP_METERING_ADJOINT.optimizer-n-restarts = 1

# ttt: minimize total travel time
# crit: penalize densities above critical. Attempt to "smooth" density peaks
RAMP_METERING_ADJOINT.objective = ttt

# penalize queues observed above this value. Attempts to limit amount of storage in queues.
RAMP_METERING_ADJOINT.soft-max-queue-length = 20.0

# how strongly should queue violations be penalized
RAMP_METERING_ADJOINT.soft-max-queue-factor = 1.0

